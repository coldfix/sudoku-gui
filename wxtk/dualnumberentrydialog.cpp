/////////////////////////////////////////////////////////////////////////////
// Name:        DualNumberEntryDialog.cpp
// Purpose:     
// Author:      Thomas Gläßle
// Modified by: 
// Created:     06/01/07 13:42:02
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 06/01/07 13:42:02

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "DualNumberEntryDialog.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "dualNumberEntryDialog.h"

////@begin XPM images
////@end XPM images

namespace wxtk
{

/*!
 * DualNumberEntryDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( DualNumberEntryDialog, wxDialog )

/*!
 * DualNumberEntryDialog event table definition
 */

BEGIN_EVENT_TABLE( DualNumberEntryDialog, wxDialog )

////@begin DualNumberEntryDialog event table entries
////@end DualNumberEntryDialog event table entries

END_EVENT_TABLE()

/*!
 * DualNumberEntryDialog constructors
 */

DualNumberEntryDialog::DualNumberEntryDialog( )
{
}

DualNumberEntryDialog::DualNumberEntryDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
}

/*!
 * DualNumberEntryDialog creator
 */

bool DualNumberEntryDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin DualNumberEntryDialog member initialisation
    m_message = "Please enter 2 numbers";
    m_prompt0 = "Number 1:";
    m_prompt1 = "Number 2:";
    m_numinfo0 = gwxSpinInfo(0,0,100);
    m_numinfo1 = gwxSpinInfo(0,0,100);
////@end DualNumberEntryDialog member initialisation

////@begin DualNumberEntryDialog creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end DualNumberEntryDialog creation
    return TRUE;
}

/*!
 * Control creation for DualNumberEntryDialog
 */

void DualNumberEntryDialog::CreateControls()
{    
////@begin DualNumberEntryDialog content construction
    // Generated by DialogBlocks, Fri 25 Feb 2011 02:01:45 AM CET (unregistered)

    DualNumberEntryDialog* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxGROW|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_MESSAGE, _("Static text"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    wxGridSizer* itemGridSizer5 = new wxGridSizer(2, 3, 0, 0);
    itemBoxSizer3->Add(itemGridSizer5, 0, wxGROW|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_PROMPT0, _("Static text"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer5->Add(itemStaticText6, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    itemGridSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSpinCtrl* itemSpinCtrl8 = new wxSpinCtrl( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_SPIN0, _T("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 0, 0 );
    itemGridSizer5->Add(itemSpinCtrl8, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText9 = new wxStaticText( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_PROMPT1, _("Static text"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer5->Add(itemStaticText9, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    itemGridSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSpinCtrl* itemSpinCtrl11 = new wxSpinCtrl( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_SPIN1, _T("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 0, 0 );
    itemGridSizer5->Add(itemSpinCtrl11, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticLine* itemStaticLine12 = new wxStaticLine( itemDialog1, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemBoxSizer3->Add(itemStaticLine12, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer13, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    wxButton* itemButton14 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemButton14->SetDefault();
    itemBoxSizer13->Add(itemButton14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton15 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add(itemButton15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    // Set validators
    itemStaticText4->SetValidator( wxGenericValidator(& m_message) );
    itemStaticText6->SetValidator( wxGenericValidator(& m_prompt0) );
    itemSpinCtrl8->SetValidator( gwxSpinValidator(& m_numinfo0) );
    itemStaticText9->SetValidator( wxGenericValidator(& m_prompt1) );
    itemSpinCtrl11->SetValidator( gwxSpinValidator(& m_numinfo1) );
////@end DualNumberEntryDialog content construction

    // Create custom windows not generated automatically here.

////@begin DualNumberEntryDialog content initialisation

////@end DualNumberEntryDialog content initialisation
}

/*!
 * Should we show tooltips?
 */

bool DualNumberEntryDialog::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap DualNumberEntryDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin DualNumberEntryDialog bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end DualNumberEntryDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon DualNumberEntryDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin DualNumberEntryDialog icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end DualNumberEntryDialog icon retrieval
}



/*
	others
*/


bool DualNumberEntryDialog::TransferDataToWindow(){
	if(wxDialog::TransferDataToWindow()){
		GetSizer()->Fit(this);
		GetSizer()->SetSizeHints(this);
		return true; }
	return false; }


} // ns wxtk


/*!
 * DualNumberEntryDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( DualNumberEntryDialog, wxDialog )


/*!
 * DualNumberEntryDialog event table definition
 */

BEGIN_EVENT_TABLE( DualNumberEntryDialog, wxDialog )

////@begin DualNumberEntryDialog event table entries
////@end DualNumberEntryDialog event table entries

END_EVENT_TABLE()


/*!
 * DualNumberEntryDialog constructors
 */

DualNumberEntryDialog::DualNumberEntryDialog()
{
    Init();
}

DualNumberEntryDialog::DualNumberEntryDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * gwxDualNumberEntryDialog creator
 */

bool DualNumberEntryDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin DualNumberEntryDialog creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end DualNumberEntryDialog creation
    return true;
}


/*!
 * DualNumberEntryDialog destructor
 */

DualNumberEntryDialog::~DualNumberEntryDialog()
{
////@begin DualNumberEntryDialog destruction
////@end DualNumberEntryDialog destruction
}


/*!
 * Member initialisation
 */

void DualNumberEntryDialog::Init()
{
////@begin DualNumberEntryDialog member initialisation
    m_message = "Please enter 2 numbers";
    m_prompt0 = "Number 1:";
    m_prompt1 = "Number 2:";
    m_numinfo0 = gwxSpinInfo(0,0,100);
    m_numinfo1 = gwxSpinInfo(0,0,100);
////@end DualNumberEntryDialog member initialisation
}


/*!
 * Control creation for gwxDualNumberEntryDialog
 */

void DualNumberEntryDialog::CreateControls()
{    
////@begin DualNumberEntryDialog content construction
    // Generated by DialogBlocks, Fri 25 Feb 2011 02:01:34 AM CET (unregistered)

    gwxDualNumberEntryDialog* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxGROW|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_MESSAGE, _("Static text"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    wxGridSizer* itemGridSizer5 = new wxGridSizer(2, 3, 0, 0);
    itemBoxSizer3->Add(itemGridSizer5, 0, wxGROW|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_PROMPT0, _("Static text"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer5->Add(itemStaticText6, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    itemGridSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSpinCtrl* itemSpinCtrl8 = new wxSpinCtrl( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_SPIN0, _T("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 0, 0 );
    itemGridSizer5->Add(itemSpinCtrl8, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText9 = new wxStaticText( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_PROMPT1, _("Static text"), wxDefaultPosition, wxDefaultSize, 0 );
    itemGridSizer5->Add(itemStaticText9, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    itemGridSizer5->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSpinCtrl* itemSpinCtrl11 = new wxSpinCtrl( itemDialog1, gwxID_DUALNUMBERENTRYDIALOG_SPIN1, _T("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 0, 0 );
    itemGridSizer5->Add(itemSpinCtrl11, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticLine* itemStaticLine12 = new wxStaticLine( itemDialog1, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemBoxSizer3->Add(itemStaticLine12, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer13, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    wxButton* itemButton14 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemButton14->SetDefault();
    itemBoxSizer13->Add(itemButton14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton15 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add(itemButton15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    // Set validators
    itemStaticText4->SetValidator( wxGenericValidator(& m_message) );
    itemStaticText6->SetValidator( wxGenericValidator(& m_prompt0) );
    itemSpinCtrl8->SetValidator( gwxSpinValidator(& m_numinfo0) );
    itemStaticText9->SetValidator( wxGenericValidator(& m_prompt1) );
    itemSpinCtrl11->SetValidator( gwxSpinValidator(& m_numinfo1) );
////@end DualNumberEntryDialog content construction
}


/*!
 * Should we show tooltips?
 */

bool DualNumberEntryDialog::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap DualNumberEntryDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin DualNumberEntryDialog bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end DualNumberEntryDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon DualNumberEntryDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin DualNumberEntryDialog icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end DualNumberEntryDialog icon retrieval
}
